#!/usr/bin/env bash
set -e -o pipefail

cd "$(dirname "${BASH_SOURCE[0]}")"

CONTAINER_NAME=${CONTAINER_NAME:-trezor-firmware-env.nix}
ALPINE_CDN=${ALPINE_CDN:-http://dl-cdn.alpinelinux.org/alpine}
ALPINE_RELEASE=${ALPINE_RELEASE:-3.12}
ALPINE_ARCH=${ALPINE_ARCH:-x86_64}
ALPINE_VERSION=${ALPINE_VERSION:-3.12.0}
CONTAINER_FS_URL=${CONTAINER_FS_URL:-"$ALPINE_CDN/v$ALPINE_RELEASE/releases/$ALPINE_ARCH/alpine-minirootfs-$ALPINE_VERSION-$ALPINE_ARCH.tar.gz"}
CACHES_VOLUME_NAME=${CACHES_VOLUME_NAME:-trezor_firmware_caches}
BLOW_CACHES=${BLOW_CACHES}

TAG=${1:-master}
REPOSITORY=${2:-/local}
PRODUCTION=${PRODUCTION:-1}
MEMORY_PROTECT=${MEMORY_PROTECT:-1}

wget --no-config -nc -P ci/ "$CONTAINER_FS_URL"
docker build -t "$CONTAINER_NAME" ci/

# stat under macOS has slightly different cli interface
USER=$(stat -c "%u" . 2>/dev/null || stat -f "%u" .)
GROUP=$(stat -c "%g" . 2>/dev/null || stat -f "%g" .)

mkdir -p build/core build/legacy
mkdir -p build/core-bitcoinonly build/legacy-bitcoinonly

DIR=$(pwd)

does_docker_volume_exist() {
  docker volume inspect "$1" >/dev/null 2>&1
}

#set -x

if [[ -n "$BLOW_CACHES" ]]; then
  if does_docker_volume_exist "$CACHES_VOLUME_NAME"; then
    echo "Removing docker data volume holding build cache"
    docker volume rm "$CACHES_VOLUME_NAME"
  fi
fi

if ! does_docker_volume_exist "$CACHES_VOLUME_NAME"; then
  echo "Creating docker data volume holding build cache"
  docker volume create "$CACHES_VOLUME_NAME"
fi

# initial step: update git repos in the cache
SCRIPT_NAME=".build_update.sh"
cat <<EOF >"build/$SCRIPT_NAME"
  # DO NOT MODIFY!
  # this file was generated by ${BASH_SOURCE[0]}
  # this script is responsible for updating the canonical repo used in subsequent builds

  set -e -o pipefail

  if [[ ! -d "/root/.cache/repos" ]]; then
    mkdir -p "/root/.cache/repos"
  fi

  # clone or copy host repo on first run
  if [[ ! -d "/root/.cache/repos/trezor-firmware" ]]; then
    if [[ $REPOSITORY = "/local" ]]; then
      # a simple rsync should be faster than cloning all submodules from the internet
      echo "Copying trezor-firmware repository from host machine..."
      echo "[please wait and do not touch the files being copied]"
      rsync -ar --info=progress2 /local/ "/root/.cache/repos/trezor-firmware"
      cd "/root/.cache/repos/trezor-firmware"
      # note that we must be careful and not bring in any build artifacts or modified files from the host machine
      # this should reset our source tree into the a pristine state, similar to a clean clone with submodule init
      echo "Resetting trezor-firmware repository into pristine state..."
      git clean -ffdx
      git submodule foreach --recursive 'git clean -ffdx'
    else
      # just clone
      echo "Cloning trezor-firmware repository, this may take a while..."
      cd "/root/.cache/repos"
      git clone "$REPOSITORY" trezor-firmware
      git submodule update --init --recursive
    fi
    cd "/root/.cache/repos/trezor-firmware"
    git remote add source-repo "$REPOSITORY"
  fi

  echo "Updating trezor-firmware repository..."
  cd "/root/.cache/repos/trezor-firmware"
  git fetch source-repo
  git checkout "$TAG"
  git submodule update --init --recursive
  echo "Resetting trezor-firmware repository into pristine state..."
  git clean -ffdx
  git submodule foreach --recursive 'git clean -ffdx'

  # ok, now we have the canonical repo updated (along with all submodules) in /root/.cache/repos/trezor-firmware

EOF

docker run -it --rm \
  -v "$DIR:/local" \
  -v "$CACHES_VOLUME_NAME":/root/.cache \
  --init \
  "$CONTAINER_NAME" \
  /nix/var/nix/profiles/default/bin/nix-shell --run "bash /local/build/$SCRIPT_NAME"

# build core

for BITCOIN_ONLY in 0 1; do

  DIRSUFFIX=${BITCOIN_ONLY/1/-bitcoinonly}
  DIRSUFFIX=${DIRSUFFIX/0/}

  SCRIPT_NAME=".build_core_$BITCOIN_ONLY.sh"
  cat <<EOF >"build/$SCRIPT_NAME"
    # DO NOT MODIFY!
    # this file was generated by ${BASH_SOURCE[0]}
    # variant: core build BITCOIN_ONLY=$BITCOIN_ONLY
    set -e -o pipefail

    # we want a clean copy of source trees to avoid any leftovers from previous builds
    # copying all files from /root/.cache/repos/trezor-firmware would be pretty slow
    # let's use overlayfs to work on top of it and throw away our potential changes
    # note that we mount overlay fs inside /root/.cache which is ext4 fs mounted from a docker volume
    # creating overlays directly in root fs, e.g. in /root or /tmp would not work
    # because that could be already an overlay fs and nesting overlays is not supported, see mount for info
    cd /root/.cache
    rm -rf upper work ws
    mkdir upper work ws
    mount -t overlay overlay -olowerdir=repos/trezor-firmware,upperdir=upper,workdir=work ws/
    cd ws

    # perform the build
    cd core
    ln -s /build build
    poetry install # does not populate cache due to a bug https://github.com/python-poetry/poetry/issues/2203
    poetry run make clean vendor build_firmware
    poetry run ../python/tools/firmware-fingerprint.py \
               -o build/firmware/firmware.bin.fingerprint \
               build/firmware/firmware.bin
    chown -R $USER:$GROUP /build
EOF

  docker run -it --rm \
    -v "$DIR:/local" \
    -v "$DIR/build/core$DIRSUFFIX":/build:z \
    -v "$CACHES_VOLUME_NAME":/root/.cache \
    --env BITCOIN_ONLY="$BITCOIN_ONLY" \
    --env PRODUCTION="$PRODUCTION" \
    --init \
    --privileged \
    "$CONTAINER_NAME" \
    /nix/var/nix/profiles/default/bin/nix-shell --run "bash /local/build/$SCRIPT_NAME"

done

# build legacy

for BITCOIN_ONLY in 0 1; do

  DIRSUFFIX=${BITCOIN_ONLY/1/-bitcoinonly}
  DIRSUFFIX=${DIRSUFFIX/0/}

  SCRIPT_NAME=".build_legacy_$BITCOIN_ONLY.sh"
  cat <<EOF >"build/$SCRIPT_NAME"
    # DO NOT MODIFY!
    # this file was generated by ${BASH_SOURCE[0]}
    # variant: legacy build BITCOIN_ONLY=$BITCOIN_ONLY
    set -e -o pipefail

    # we want a clean copy of source trees to avoid any leftovers from previous builds
    # copying all files from /root/.cache/repos/trezor-firmware would be pretty slow
    # let's use overlayfs to work on top of it and throw away our potential changes
    # note that we mount overlay fs inside /root/.cache which is ext4 fs mounted from a docker volume
    # creating overlays directly in root fs, e.g. in /root or /tmp would not work
    # because that could be already an overlay fs and nesting overlays is not supported, see mount for info
    cd /root/.cache
    rm -rf upper work ws
    mkdir upper work ws
    mount -t overlay overlay -olowerdir=repos/trezor-firmware,upperdir=upper,workdir=work ws/
    cd ws

    # perform the build
    cd legacy
    ln -s /build build
    poetry install # does not populate cache due to a bug https://github.com/python-poetry/poetry/issues/2203
    poetry run script/cibuild
    mkdir -p build/firmware
    cp firmware/trezor.bin build/firmware/firmware.bin
    cp firmware/trezor.elf build/firmware/firmware.elf
    poetry run ../python/tools/firmware-fingerprint.py \
               -o build/firmware/firmware.bin.fingerprint \
               build/firmware/firmware.bin
    chown -R $USER:$GROUP /build
EOF

  docker run -it --rm \
    -v "$DIR:/local" \
    -v "$DIR/build/legacy$DIRSUFFIX":/build:z \
    -v "$CACHES_VOLUME_NAME":/root/.cache \
    --env BITCOIN_ONLY="$BITCOIN_ONLY" \
    --env MEMORY_PROTECT="$MEMORY_PROTECT" \
    --init \
    --privileged \
    "$CONTAINER_NAME" \
    /nix/var/nix/profiles/default/bin/nix-shell --run "bash /local/build/$SCRIPT_NAME"

done

# all built, show fingerprints

echo "Fingerprints:"
for VARIANT in core legacy; do
  for BITCOIN_ONLY in 0 1; do

    DIRSUFFIX=${BITCOIN_ONLY/1/-bitcoinonly}
    DIRSUFFIX=${DIRSUFFIX/0/}

    FWPATH=build/${VARIANT}${DIRSUFFIX}/firmware/firmware.bin
    FINGERPRINT=$(tr -d '\n' < $FWPATH.fingerprint)
    echo "$FINGERPRINT $FWPATH"
  done
done
